import 'package:dfvue/utils/pref_utils.dart';
import 'package:dfvue/utils/size_utils.dart';
import 'package:flutter/material.dart';
import '../app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.greenA200,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          shadowColor: colorScheme.errorContainer.withOpacity(0.25),
          elevation: 4,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          color: colorScheme.primary,
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.whiteA700.withOpacity(0.3),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 13.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 10.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: 30.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray20003,
          fontSize: 25.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 22.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 18.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF25BF6C),
    primaryContainer: Color(0XCC272626),
    secondaryContainer: Color(0X7525BF6C),

    // Error colors
    errorContainer: Color(0X75000000),
    onError: Color(0XE526C06D),
    onErrorContainer: Color(0XFF2F2F2F),

    // On colors(text colors)
    onPrimary: Color(0XFF191818),
    onPrimaryContainer: Color(0XF4A5F275),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber400 => Color(0XFFFFDB22);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray20000 => Color(0X00B3CDBF);

  // BlueGrayE
  Color get blueGray100E5 => Color(0XE5D5D5D5);

  // Gray
  Color get gray100 => Color(0XFFF9F5F5);
  Color get gray10001 => Color(0XFFF6F5F5);
  Color get gray10002 => Color(0XFFF6F6F6);
  Color get gray10003 => Color(0XFFF5F5F5);
  Color get gray10004 => Color(0XFFF6F4F4);
  Color get gray200 => Color(0XFFF1EFEF);
  Color get gray20001 => Color(0XFFE9E6E6);
  Color get gray20002 => Color(0XFFE9E7E7);
  Color get gray20003 => Color(0XFFEDE4E4);
  Color get gray20004 => Color(0XFFF0EEEE);
  Color get gray30099 => Color(0X99DADADA);
  Color get gray40099 => Color(0X99C3C3C3);
  Color get gray50 => Color(0XFFF9F8F8);
  Color get gray500 => Color(0XFFA8A8A8);
  Color get gray50001 => Color(0XFFA4A1A0);
  Color get gray5001 => Color(0XFFFFFAFA);
  Color get gray5002 => Color(0XFFFFFBFB);
  Color get gray5003 => Color(0XFFF8FEFF);
  Color get gray700 => Color(0XFF675A5A);
  Color get gray800 => Color(0XFF474646);
  Color get gray900 => Color(0XFF171717);

  // GrayE
  Color get gray200E5 => Color(0XE5F0F0F0);

  // Green
  Color get green200 => Color(0XFFA8EFA1);
  Color get green50099 => Color(0X994FC645);
  Color get greenA100 => Color(0XFF98FFBB);
  Color get greenA10001 => Color(0XFF98F4C2);
  Color get greenA200 => Color(0XFF8CF8B1);

  // GreenB
  Color get green700B2 => Color(0XB22E905B);

  // Lime
  Color get lime600 => Color(0XFFCAC544);

  // Orange
  Color get orangeA200 => Color(0XFFF7A435);

  // Red
  Color get red400 => Color(0XFFE95E3F);
  Color get red600 => Color(0XFFEF2323);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
